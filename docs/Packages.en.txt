! Packages
Mastersign.Expressions comes with a number of packages for standard applications. A package contains constants and functions.

* [Logic|#logic]
* [Math|#math]
* [String Manipulation|#string]
* [Regular Expressions|#regex]

A package can be loaded by calling *EvaluationContext.Load...Package()*. Calling *EvaluationContext.LoadAllPackages()* loads all packages that are currently included in Mastersign.Expressions.

!! {anchor:Logic}Logic

* *not(value)* - Inverts a logical value. _not(true)_ is _false_ and _not(false)_ is _true_

!! {anchor:math}Math
!!! Constants
* *pi* - The natural constant PI as 64 bit floating point number
* *e* - The natural constant _e_ or Euler number as 64 bit floating point number
!!! Functions
* *mod(num, den)* - The residue or modulo of the division between _num_ and _den_
* *abs(value)* - The absolute value of a number (_System.Math.Abs()_)
* *sign(value)* - Returns a 32 bit integer value, representing the sign of the number (_System.Math.Sign()_)
* *floor(value)* - Rounds a number downwards (_System.Math.Floor()_)
* *round(value)* - Rounds a number (_System.Math.Round()_)
* *ceil(calue)* - Rounds a number upwards (_System.Math.Ceiling()_)
* *trunc(value)* - Truncates the fraction of a value (_System.Math.Truncate()_)

* *sin(value)* - Computes the sine of an angle (_System.Math.Sin()_)
* *cos(value)* - Computes the cosine of an angle (_System.Math.Cos()_)
* *tan(value)* - Computes the tangent of an angle (_System.Math.Tan()_)
* *asin(value)* - Computes the angle, which sine is the given number (_System.Math.Asin()_)
* *acos(value)* - Computes the angle, which cosine is the given number (_System.Math.Acos()_)
* *atan(value)* - Computes the angle, which tangent is the given number (_System.Math.Atan()_)
* *atan2(y, x)* - Computes the angle, which tangent is the ratio of the given numbers (_System.Math.Atan2()_)
* *sinh(value)* - Computes the hyperbolic sine of an angle (_System.Math.Sinh()_)
* *cosh(value)* - Computes the hyperbolic cosine of an angle (_System.Math.Cosh()_)
* *tanh(value)* - Computes the hyperbolic tangent of an angle (_System.Math.Tanh()_)

* *sqrt(value)* - Computes the square root of the given number (_System.Math.Sqrt()_)
* *exp(value)* - Computes the given number to the power of e (Euler number) (_System.Math.Exp()_)
* *log(value)* - Computes the natural logarithm of the given number (_System.Math.Log()_)
* *log(base, exp)* - Computes the logarithm of _exp_ to the base of _base_ (_System.Math.Log()_)
* *log10(value)* - Computes the logarithm of the given value to the base of 10 (_System.Math.Log10()_)

* *min(a, b)* - Returns the lesser value of _a_ and _b_ (_System.Math.Min()_)
* *max(a,b)* - Returns the greater value of _a_ and _b_ (System.Math.Max()_)

* *rand()* - Returns a random number between _0.0_ and _1.0_ as 64 bit floating point (_System.Random.NextDouble()_)

!! {anchor:conversion}Conversion
All conversion functions start with the prefix "c_" followed by a name describing the target type.

* *{"c_byte(value)"}* - Converts a numerical value into _System.Byte_
* *{"c_sbyte(value)"}* - Converts a numerical value into _System.SByte_
* *{"c_int16(value)"}* - Converts a numerical value into _System.Int16_
* *{"c_uint16(value)"}* - Converts a numerical value into _System.UInt16_
* *{"c_int32(value)"}* - Converts a numerical value into _System.Int32_
* *{"c_uint32(value)"}* - Converts a numerical value into _System.UInt32_
* *{"c_int64(value)"}* - Converts a numerical value into _System.Int64_
* *{"c_uint64(value)"}* - Converts a numerical value into _System.UInt64_
* *{"c_single(value)"}* - Converts a numerical value into _System.Single_
* *{"c_double(value)"}* - Converts a numerical value into _System.Double_
* *{"c_decimal(value)"}* - Converts a numerical value into _System.Decimal_
* *{"c_str(value)"}* - Converts an arbitrary value into a _System.String_ by calling _System.Object.ToString()_

!! {anchor:string}String Manipulation
* *{"to_lower(value)"}* - Converts the casing of a string into lower case (_System.String.ToLowerInvariant()_)
* *{"to_upper(value)"}* - Converts the casing of a string into upper case (_System.String.ToUpperInvariant()_)
* *trim(value)* - Removes leading and trailing whitespaces from a string (_System.String.Trim()_)
* *{"trim_start(value)"}* - Removes leading white spaces from a string (_System.String.TrimStart()_)
* *{"trim_end(value)"}* - Removes trailing whitespaces from a string (_System.String.TrimEnd()_)
* *substr(str, start)* - Returns a rest of a string, beginning with the character at zero-based position _start_ (_System.String.Substring()_)
* *substr(str, start, length)* - Returns a part of a string, starting with the character at zero-based position _start_ and being _length_ characters long (_System.String.Substring()_)
* *remove(str, start)* _ Removes a trailing part from a string, starting with the character at zero-based position _start_ (_System.String.Remove()_)
* *remove(str, start, length)* _ Removes a part from a string, starting with the character at zero-based position _start_ and being _length_ characters long (_System.String.Remove()_)
* *replace(str, old, new)* - Replaces every occurance of _new_ in _str_ with _old_ (_System.String.Replace()_)

* *find(haystack, needle)* - Searches for the first occurance of _needle_ in _haystack_ and returns the zero-based position of the first character of _needle_ in _haystack_; if _needle_ is not found, _-1_ is returned (_System.String.IndexOf()_)
* *find(haystack, needle, start)* - Searches for the first occurance of _needle_ in _haystack_, beginning at _start_, and returns the zero-based position of the first character of _needle_ in _haystack_; if _needle_ is not found, _-1_ is returned (_System.String.IndexOf()_)
* *find(haystack, needle, start, count)* - Searches for the first occurance of _needle_ in _haystack_, beginning at _start_ but only for the next _count_ characters, and returns the zero-based position of the first character of _needle_ in _haystack_; if _needle_ is not found, _-1_ is returned (_System.String.IndexOf()_)
* *{"find_i(haystack, needle)"}* - Like _find(haystack, neddle)_, but case-insensitive (_System.String.IndexOf()_)
* *{"find_i(haystack, needle, start)"}* - Like _find(haystack, neddle, start)_, but case-insensitive (_System.String.IndexOf()_)
* *{"find_i(haystack, needle, start, count)"}* - Like _find(haystack, neddle, start, count)_, but case-insensitive (_System.String.IndexOf()_)
* *{"find_last(haystack, needle)"}* - Searches for the last occurance of _needle_ in _haystack_ and returns the zero-based position of the first character of _needle_ in _haystack_; if _needle_ is not found, _-1_ is returned (_System.String.IndexOf()_)
* *{"find_last(haystack, needle, start)"}* - Searches for the last occurance of _needle_ in _haystack_, beginning at _start_, and returns the zero-based position of the first character of _needle_ in _haystack_; if _needle_ is not found, _-1_ is returned (_System.String.IndexOf()_)
* *{"find_last(haystack, needle, start, count)"}* - Searches for the last occurance of _needle_ in _haystack_, beginning at _start_ but only for the next _count_ characters, and returns the zero-based position of the first character of _needle_ in _haystack_; if _needle_ is not found, _-1_ is returned (_System.String.IndexOf()_)
* *{"find_last_i(haystack, needle)"}* - Like _{"find_last(haystack, needle)"}_, but case-insensitive (_System.String.IndexOf()_)
* *{"find_last_i(haystack, needle, start)"}* - Like _{"find_last(haystack, needle, start)"}_, but case-insensitive (_System.String.IndexOf()_)
* *{"find_last_i(haystack, needle, start, count)"}* - Like _{"find_last(haystack, needle, start, count)"}_, but case-insensitive (_System.String.IndexOf()_)

* *contains(haystack, needle)* - Returns _true_ if _needle_ is found at least once in _haystack_; otherwise it returns _false_ (_System.String.Contains()_)
* *{"starts_with(str, start)"}* - Returns _true_ if _str_ begins with _start_; otherwise it returns _false_ (_System.String.StartsWith()_)
* *{"ends_with(str, end)"}* - Returns _true_ if _str_ ends with _end_; otherwise it returns _false_ (_System.String.StartsWith()_)

* *min(a, b)* - Returns the most less string, according to the alphabetical order
* *max(a, b)* - Returns the greatest string, according to the alphabetical order
* *{"min_i(a, b)"}* - Returns the most less string, according to the alphabetical order but case-insensitive
* *{"max_i(a, b)"}* - Returns the greatest string, according to the alphabetical order but case-insensitive

!! {anchor:regex}Regular Expressions
* *regex(str, pattern)* - Returns _true_, if regular expression _pattern_ matches _str_ at least once (_System.Text.RegularExpressions.Regex.IsMatch()_)
* *{"regex_match(str, pattern)"}* - Returns the first character sequence in _str_, matched by the regular expression _pattern_ (_System.Text.RegularExpressions.Regex.Match()_)
* *{"regex_replace(str, patttern, new)"}* - Replaces every match of the regular expression _pattern_ in _str_ by _new_ (_System.Text.RegularExpressions.Regex.Replace()_)

